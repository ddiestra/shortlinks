<?php

namespace Drupal\shortlinks\Entity;

use Drupal\Core\Entity\ContentEntityBase;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\ContentEntityInterface;

/**
 * Defines the Link entity.
 *
 * @ingroup link
 *
 * @ContentEntityType(
 *   id = "link",
 *   label = @Translation("Link"),
 *   base_table = "link",
 *   entity_keys = {
 *     "id" = "id"
 *   },
 * )
 */
class Link extends ContentEntityBase implements ContentEntityInterface {

  /**
   * {@inheritdoc}
   */
  public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {

    // Standard field, used as unique if primary index.
    $fields['id'] = BaseFieldDefinition::create('integer')
      ->setLabel(t('ID'))
      ->setDescription(t('The ID of the link entity.'))
      ->setReadOnly(TRUE);

    $fields['code'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Code'))
      ->setDescription(t('The Autogenerated Code.'))
      ->setReadOnly(TRUE);

    $fields['path'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Path'))
      ->setDescription(t('The path to redirect to.'))
      ->setReadOnly(TRUE);

    $fields['redirects'] = BaseFieldDefinition::create('integer')
      ->setLabel(t('Redirects'))
      ->setDescription(t('The total number of redirects.'))
      ->setReadOnly(TRUE);

    return $fields;
  }

  /**
   * Returns an array of attributes.
   */
  public function renderArray() {
    return [
      'code' => $this->get('code')->getString(),
      'path' => $this->get('path')->getString(),
      'counter' => $this->get('redirects')->getString(),
    ];
  }

}
